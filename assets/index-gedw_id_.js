var l=Object.defineProperty;var d=(s,t,e)=>t in s?l(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var i=(s,t,e)=>d(s,typeof t!="symbol"?t+"":t,e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const c of o)if(c.type==="childList")for(const n of c.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&r(n)}).observe(document,{childList:!0,subtree:!0});function e(o){const c={};return o.integrity&&(c.integrity=o.integrity),o.referrerPolicy&&(c.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?c.credentials="include":o.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function r(o){if(o.ep)return;o.ep=!0;const c=e(o);fetch(o.href,c)}})();class h{constructor(t,e,r){i(this,"ctx");i(this,"width");i(this,"height");i(this,"centerX");i(this,"centerY");i(this,"drawNodes",t=>{const e=[];for(let r=0;r<t.length;r++){if(t[r].z>=0){e.push(t[r]);continue}const o=this.centerX+t[r].x,c=this.centerY+t[r].y;this.drawCircle(o,c,t[r].size,t[r].color)}for(let r=0;r<e.length;r++){const o=this.centerX+e[r].x,c=this.centerY+e[r].y;this.drawCircle(o,c,e[r].size,e[r].color)}});i(this,"drawCircle",(t,e,r,o)=>{this.ctx&&(this.ctx.beginPath(),this.ctx.arc(t,e,r,0,2*Math.PI),this.ctx.fillStyle=o,this.ctx.fill(),this.ctx.stroke())});this.ctx=t.getContext("2d"),this.width=e,this.height=r,this.centerX=e/2,this.centerY=r/2}}class u{constructor(t,e,r){i(this,"drawCanvas");i(this,"element");i(this,"nodes");i(this,"edges");i(this,"rotX");i(this,"rotY");i(this,"rotZ");i(this,"zoom");i(this,"step");i(this,"updateCanvasSize",(t,e)=>{this.element.width=t,this.element.height=e});i(this,"render",()=>{});i(this,"rotate",(t,e)=>{console.log(`Rotated in the ${e?"+":"-"} ${t} direction...`)});this.drawCanvas=new h(t,e,r),t.width=e,t.height=r,this.element=t,this.nodes=[],this.edges=[],this.rotX=0,this.rotY=0,this.rotZ=0,this.step=15,this.zoom=1}}const f=s=>{const t="bg-green-100 p-2 font-bold text-2xl text-green-700 w-16 border-4 border-black";return`
    <div id="${s}-nav" class="p-2">
      <button id="${s}-down" data-nav="${s}-down" class="${t} rounded-l-2xl">-${s.toUpperCase()}</button>
      <button id="${s}-up" data-nav="${s}-up" class="${t} rounded-r-2xl">+${s.toUpperCase()}</button>
    </div>
  `};document.querySelector("#app").innerHTML=`
  <canvas id="geodesic-canvas" class="border-4 border-black"></canvas>
  <section id="geodesic-interface" class="border-4 flex">
    ${["x","y","z"].map(s=>f(s)).join("")}
  </section>
`;const p=document.querySelector("#geodesic-canvas"),g=new u(p,800,800),a=document.querySelectorAll("[data-nav]");for(let s=0;s<a.length;s++)a[s].addEventListener("click",()=>{const[t,e]=a[s].dataset.nav.split("-");g.rotate(t,e==="up")});
